/**
 * Script para corrigir problemas com Cloud Functions
 * Execute com: node fix-functions.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üõ†Ô∏è Iniciando corre√ß√£o das Cloud Functions...');

// Verificar se a pasta functions existe
if (!fs.existsSync('./functions')) {
  console.error('‚ùå Pasta "functions" n√£o encontrada. Verifique se voc√™ est√° no diret√≥rio raiz do projeto.');
  process.exit(1);
}

// Passo 1: Verificar o package.json
console.log('1Ô∏è‚É£ Verificando package.json...');
try {
  const packageJsonPath = './functions/package.json';
  const packageJson = require(packageJsonPath);
  
  // Atualizar vers√µes das depend√™ncias
  packageJson.dependencies = {
    "firebase-admin": "^11.8.0",
    "firebase-functions": "^4.3.1",
    "playwright": "^1.40.0",
    "dotenv": "^16.3.1",
    ...(packageJson.dependencies || {})
  };
  
  // Definir a vers√£o do Node.js para 18
  packageJson.engines = {
    "node": "18"
  };
  
  // Salvar altera√ß√µes
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ package.json atualizado com sucesso.');
} catch (error) {
  console.error('‚ùå Erro ao atualizar package.json:', error.message);
}

// Passo 2: Verificar e corrigir o arquivo sigaaScraper.js
console.log('2Ô∏è‚É£ Verificando sigaaScraper.js...');
try {
  const sigaaScraperPath = './functions/sigaaScraper.js';
  if (fs.existsSync(sigaaScraperPath)) {
    let content = fs.readFileSync(sigaaScraperPath, 'utf8');
    
    // Verificar e corrigir a linha da fun√ß√£o runWith
    if (!content.includes('.region(')) {
      content = content.replace(
        'exports.scrapeSigaa = functions',
        'exports.scrapeSigaa = functions\n  .region(\'us-central1\')'
      );
      fs.writeFileSync(sigaaScraperPath, content);
      console.log('‚úÖ sigaaScraper.js corrigido com sucesso.');
    } else {
      console.log('‚úÖ sigaaScraper.js j√° est√° correto.');
    }
  } else {
    console.error('‚ùå Arquivo sigaaScraper.js n√£o encontrado.');
  }
} catch (error) {
  console.error('‚ùå Erro ao corrigir sigaaScraper.js:', error.message);
}

// Passo 3: Verificar e criar pasta de scripts
console.log('3Ô∏è‚É£ Verificando pasta de scripts...');
try {
  const scriptsPath = './functions/scripts';
  if (!fs.existsSync(scriptsPath)) {
    fs.mkdirSync(scriptsPath, { recursive: true });
    console.log('‚úÖ Pasta scripts criada com sucesso.');
  } else {
    console.log('‚úÖ Pasta scripts j√° existe.');
  }
  
  // Copiar script de scraping
  const sourceScriptPath = './scraping/sigaa-ufc-playwright.js';
  const targetScriptPath = './functions/scripts/sigaa-ufc-playwright.js';
  
  if (fs.existsSync(sourceScriptPath) && !fs.existsSync(targetScriptPath)) {
    fs.copyFileSync(sourceScriptPath, targetScriptPath);
    console.log('‚úÖ Script de scraping copiado com sucesso.');
  } else if (fs.existsSync(targetScriptPath)) {
    console.log('‚úÖ Script de scraping j√° existe no diret√≥rio correto.');
  } else {
    console.error('‚ùå Script de scraping n√£o encontrado em ./scraping/');
  }
} catch (error) {
  console.error('‚ùå Erro ao configurar scripts:', error.message);
}

// Passo 4: Sugerir comandos para atualiza√ß√£o
console.log('\nüîÑ Pr√≥ximos passos para atualizar as depend√™ncias:');
console.log('1. Execute os seguintes comandos:');
console.log('   cd functions');
console.log('   npm install');
console.log('2. Ap√≥s a instala√ß√£o, implante as fun√ß√µes:');
console.log('   firebase deploy --only functions');

// Passo 5: Atualizar configura√ß√£o do projeto para usar browser scraping tempor√°rio
console.log('\nüîß Configurando modo tempor√°rio de scraping no navegador...');
try {
  const configPath = './src/utils/config.ts';
  if (fs.existsSync(configPath)) {
    let content = fs.readFileSync(configPath, 'utf8');
    content = content.replace(
      'export const USE_BROWSER_SCRAPING = false;',
      'export const USE_BROWSER_SCRAPING = true; // Usando modo tempor√°rio at√© resolver Cloud Functions'
    );
    fs.writeFileSync(configPath, content);
    console.log('‚úÖ Modo de scraping no navegador ativado temporariamente.');
  } else {
    console.log('‚ùì Arquivo de configura√ß√£o n√£o encontrado. Verifique o caminho correto.');
  }
} catch (error) {
  console.error('‚ùå Erro ao atualizar configura√ß√£o:', error.message);
}

console.log('\n‚ú® Corre√ß√µes conclu√≠das!');
console.log('Sua aplica√ß√£o est√° configurada para usar o modo de scraping no navegador temporariamente,');
console.log('enquanto voc√™ resolve os problemas com as Cloud Functions.'); 